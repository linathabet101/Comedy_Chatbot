import os
import requests
from dotenv import load_dotenv
import time

class VoiceChatbot:
    def __init__(self):
        """
        Initialize chatbot with Groq API
        """
        
        load_dotenv()
        
        
        self.api_key = os.getenv('GROQ_API_KEY')
        
        
        self.url = 'https://api.groq.com/openai/v1/chat/completions'
    
    def generate_response(self, situation):
        """
        Generate humorous response via Groq API
        
        Args:
            situation (str): User's input situation
        
        Returns:
            str: Comedic response generated by the AI
        """
        
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        
        payload = {
            'model': 'llama-3.2-90b-vision-preview',  # Groq's Llama 3 model
            'messages': [
                {
                    'role': 'system', 
                    'content': (
                        'You are a witty stand-up comedian who specializes in turning '
                        'everyday mishaps into hilarious jokes. Your responses should be:'
                        '- Clever and unexpected\n'
                        '- Short and punchy\n'
                        '- Appropriate for general audience\n'
                        '- Focused on finding humor in the situation'
                    )
                },
                {
                    'role': 'user', 
                    'content': f'Turn this awkward situation into a hilarious joke: {situation}'
                }
            ],
            'max_tokens': 200,  # Limit response length
            'temperature': 0.7,  # Creativity level
            'top_p': 0.9,  # Diversity of response
        }
        
        try:
            
            response = requests.post(self.url, headers=headers, json=payload)
            
            # to Check if request was successful:
            if response.status_code == 200:
                
                result = response.json()
                return result['choices'][0]['message']['content'].strip()
            
            # to handle API errors:
            raise Exception(f"API call failed with status {response.status_code}: {response.text}")
        
        except Exception as e:
            
            return (
                f"Oops! My comedy circuit seems to be experiencing technical difficulties. "
                f"Here's a backup joke: Why did the AI go to comedy school? To improve its algorithms of hilarity! "
                f"Original error: {str(e)}"
            )
    
    def generate_roast(self, situation):
        """
        Generate a playful roast based on the situation
        
        Args:
            situation (str): User's input situation
        
        Returns:
            str: Humorous roast generated by the AI
        """
        
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        
        payload = {
            'model': 'llama3-8b-8192',
            'messages': [
                {
                    'role': 'system', 
                    'content': (
                        'You are a cheeky roast master who can turn any situation into '
                        'a lighthearted, funny burn. Your roasts should be:'
                        '- Witty and clever\n'
                        '- Playful, not mean-spirited\n'
                        '- Short and impactful\n'
                        '- Focused on finding humor in human mistakes'
                    )
                },
                {
                    'role': 'user', 
                    'content': f'Create a funny, gentle roast about this situation: {situation}'
                }
            ],
            'max_tokens': 150,
            'temperature': 0.8,
            'top_p': 0.9,
        }
        
        try:
            
            response = requests.post(self.url, headers=headers, json=payload)
            
            
            if response.status_code == 200:
                
                result = response.json()
                return result['choices'][0]['message']['content'].strip()
            
           
            raise Exception(f"API call failed with status {response.status_code}: {response.text}")
        
        except Exception as e:
            
            return (
                f"Well, looks like my roast generator is having a moment. "
                f"How about this: You're so unique, even my error messages can't roast you! "
                f"Original error: {str(e)}"
            )

# Example for testing
def main():
    chatbot = VoiceChatbot()
    
    test_situation = "I accidentally sent a work email to my entire company instead of just my boss"
    try:
        start_time = time.time()
        joke = chatbot.generate_response(test_situation)
        print("Joke:", joke)
        print("Time taken for joke:", time.time() - start_time)
    except requests.exceptions.Timeout:
        print("The request to generate a joke timed out.")
    
    try:
        roast = chatbot.generate_roast(test_situation)
        print("Roast:", roast)
    except requests.exceptions.Timeout:
        print("The request to generate a roast timed out.")

if __name__ == "__main__":
    main()